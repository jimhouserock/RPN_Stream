<!-- Educational Info Box for First-Time Users -->
<div id="educationalInfo" class="alert alert-info alert-dismissible fade show mb-4" role="alert" style="display: none;">
  <div class="row align-items-center">
    <div class="col-md-1 text-center">
      <i class="bi bi-lightbulb fs-3 text-primary"></i>
    </div>
    <div class="col-md-8">
      <h6 class="alert-heading mb-2">
        <i class="bi bi-info-circle"></i> Why Postfix Notation (RPN) Matters in Data Engineering
      </h6>
      <p class="mb-2">
        Postfix notation (Reverse Polish Notation) eliminates parentheses and operator precedence rules, making it ideal for
        <strong>stack-based computation systems</strong>, <strong>expression parsing in compilers</strong>,
        <strong>database query optimization</strong>, and <strong>scientific calculators</strong>.
      </p>
      <div class="d-flex gap-3">
        <small><code>10 3 + → 13</code></small>
        <small><code>10 3 2 + - → 5</code></small>
        <small><code>10 3 * 2 ^ → 900</code></small>
      </div>
    </div>
    <div class="col-md-3 text-end">
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  </div>
</div><!-- Main Calculator Interface -->
<div class="row justify-content-center">
  <div class="col-12 col-md-10 col-lg-8 col-xl-6">
    <div class="card shadow-lg border-0">
      <div class="card-header bg-gradient text-white text-center py-3" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <h1 class="h4 mb-0">
          <i class="bi bi-calculator"></i> Postfix Calculator
        </h1>
        <p class="mb-0 mt-1 opacity-90 small">Reverse Polish Notation (RPN)</p>
      </div>
      
      <div class="card-body p-3 p-md-4">
        <!-- Calculator Form -->
        <%= form_with url: calculate_path, method: :post, local: true, class: "mb-3" do |form| %>
          <div class="mb-3">
            <%= form.label :expression, "Enter Expression:", class: "form-label fw-semibold" %>
            <%= form.text_field :expression,
                value: @expression,
                class: "form-control",
                placeholder: "e.g., 10 3 + or 10 3 2 + -",
                autocomplete: "off",
                autofocus: true %>
            <div class="form-text small">
              Numbers and operators separated by spaces. Operators: + - * / ^
            </div>
          </div>

          <div class="d-flex flex-column flex-sm-row gap-2">
            <button type="button" id="randomRpnBtn" class="btn btn-outline-primary btn-sm">
              <i class="bi bi-shuffle"></i> Random
            </button>
            <%= form.submit "Calculate", class: "btn btn-primary flex-grow-1" %>
          </div>
        <% end %>        <!-- Result Display -->
        <% if @result || @error %>
          <div class="result-section mt-3 pt-3 border-top">
            <% if @error %>
              <div class="alert alert-danger alert-sm d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <div>
                  <strong>Error:</strong> <%= @error %>
                </div>
              </div>
            <% else %>
              <div class="alert alert-success alert-sm" role="alert">
                <div class="d-flex align-items-center mb-2">
                  <i class="bi bi-check-circle-fill me-2"></i>
                  <strong>Result:</strong>
                  <span class="fs-5 fw-bold text-primary ms-2"><%= @result %></span>
                </div>

                <!-- Input and Explanation breakdown -->
                <div class="mt-2 p-2 bg-white rounded border">
                  <div class="row g-2">
                    <div class="col-12 col-md-6">
                      <small class="text-muted d-block"><strong>Input:</strong></small>
                      <code class="text-dark small">"<%= @expression %>"</code>
                    </div>
                    <div class="col-12 col-md-6">
                      <small class="text-muted d-block"><strong>Explanation:</strong></small>
                      <span class="small text-dark"><%= generate_explanation(@expression) %></span>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    </div>    <!-- Sample Streaming Data Input & Outputs -->
    <div class="card mt-4 border-0 shadow-sm">
      <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0 text-dark">
          <i class="bi bi-broadcast"></i> Sample Streaming Data Input & Outputs
        </h5>
        <div>
          <button id="streamToggle" class="btn btn-sm btn-outline-danger">
            <i class="bi bi-stop-fill"></i> Stop Stream
          </button>
          <span id="streamStatus" class="badge bg-success ms-2">Live</span>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead class="table-primary">
              <tr>
                <th scope="col">Input (string)</th>
                <th scope="col">Output (number)</th>
                <th scope="col">Explanation</th>
              </tr>
            </thead>
            <tbody id="streamingTable">
              <tr>
                <td><code>"10 3 +"</code></td>
                <td><strong>13</strong></td>
                <td>Equivalent to <code>10 + 3</code></td>
              </tr>
              <tr>
                <td><code>"10 3 2 + -"</code></td>
                <td><strong>5</strong></td>
                <td>Equivalent to <code>10 - (3 + 2)</code></td>
              </tr>
              <tr>
                <td><code>"10 3 * 2 ^"</code></td>
                <td><strong>900</strong></td>
                <td>Equivalent to <code>(10 * 3)^2</code></td>
              </tr>
            </tbody>
          </table>
        </div>
        <div class="mt-3">
          <small class="text-muted">
            <strong>How it works:</strong> Numbers are pushed onto a stack, operators pop two numbers, perform the operation, and push the result back.
            <span id="streamInfo"> | <strong>Streaming:</strong> Real-time RPN calculations simulating data engineering pipeline.</span>
          </small>
        </div>
      </div>
    </div>

  </div>
</div>

<!-- PART 2: System Architecture Section -->
<div class="bg-light py-5 mt-5">
  <div class="container-fluid px-4">
    <div class="text-center mb-5">
      <div class="badge bg-success fs-4 mb-4 px-4 py-3">
        <i class="bi bi-2-circle"></i> PART 2: SYSTEM DESIGN
      </div>
      <h2 class="display-5 fw-bold text-primary mb-3">
        <i class="bi bi-diagram-3"></i> RPN Calculator System
      </h2>
      <p class="lead text-muted">Data Processing Architecture</p>
    </div>
    <!-- Architecture Diagram - Full Width -->
    <div class="row mb-5">
      <div class="col-12">
        <div class="card border-0 shadow-lg">
          <div class="card-header bg-primary text-white text-center py-3">
            <h3 class="mb-0">
              <i class="bi bi-cpu"></i> Architecture Diagram
            </h3>
          </div>
          <div class="card-body p-5">
            <div class="text-center">
              <div class="border-3 border-primary rounded p-4 bg-white" style="border-style: solid; overflow: auto;">
                <%= image_tag "data architecture.png",
                    alt: "RPN Data Processing Architecture",
                    class: "rounded shadow-lg",
                    style: "display: block; margin: 0 auto; max-width: none; height: auto;" %>
              </div>
              <div class="mt-4">
                <h5 class="text-primary mb-2">
                  <i class="bi bi-diagram-2"></i> System Architecture
                </h5>
                <p class="text-muted mb-1">
                  Data flow from web interface through processing to results
                </p>
                <small class="text-muted fst-italic">
                  RPN calculator processing pipeline
                </small>
              </div>

              <!-- Enterprise Disclaimer -->
              <div class="alert alert-info border-0 shadow-sm mt-4" role="alert">
                <div class="d-flex align-items-start">
                  <i class="bi bi-info-circle-fill text-info me-3 mt-1"></i>
                  <div>
                    <h6 class="alert-heading mb-2">
                      <i class="bi bi-building"></i> Note
                    </h6>
                    <p class="mb-0 small">
                      <strong>Enterprise Design:</strong> This shows a comprehensive system architecture. Most businesses use simpler solutions that focus on core functionality.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- System Design - Simplified -->
    <div class="row g-4 mb-5">
      <!-- How It Works -->
      <div class="col-lg-6">
        <div class="card h-100 border-primary shadow">
          <div class="card-header bg-primary text-white">
            <h4 class="mb-0">
              <i class="bi bi-gear"></i> How It Works
            </h4>
          </div>
          <div class="card-body">
            <div class="d-flex align-items-center mb-3">
              <span class="badge bg-primary rounded-pill me-3">1</span>
              <span>User submits RPN expression</span>
            </div>
            <div class="d-flex align-items-center mb-3">
              <span class="badge bg-primary rounded-pill me-3">2</span>
              <span>Rails API sends to Kafka</span>
            </div>
            <div class="d-flex align-items-center mb-3">
              <span class="badge bg-primary rounded-pill me-3">3</span>
              <span>Processors calculate results</span>
            </div>
            <div class="d-flex align-items-center">
              <span class="badge bg-primary rounded-pill me-3">4</span>
              <span>Results sent to dashboard & database</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Key Features -->
      <div class="col-lg-6">
        <div class="card h-100 border-success shadow">
          <div class="card-header bg-success text-white">
            <h4 class="mb-0">
              <i class="bi bi-check-circle"></i> Key Features
            </h4>
          </div>
          <div class="card-body">
            <ul class="list-unstyled">
              <li class="mb-2"><i class="bi bi-lightning text-warning me-2"></i> <strong>Real-time processing</strong></li>
              <li class="mb-2"><i class="bi bi-arrows-expand text-info me-2"></i> <strong>Auto-scaling</strong></li>
              <li class="mb-2"><i class="bi bi-shield-check text-success me-2"></i> <strong>Fault tolerance</strong></li>
              <li class="mb-2"><i class="bi bi-graph-up text-primary me-2"></i> <strong>Monitoring & alerts</strong></li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



<!-- JavaScript for Enhanced UX -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Show educational info box on first visit
  if (!localStorage.getItem('rpn_visited')) {
    document.getElementById('educationalInfo').style.display = 'block';
    localStorage.setItem('rpn_visited', 'true');
  }

  // Handle alert dismissal - store preference
  const educationalAlert = document.getElementById('educationalInfo');
  if (educationalAlert) {
    educationalAlert.addEventListener('closed.bs.alert', function () {
      localStorage.setItem('rpn_info_dismissed', 'true');
    });
  }

  // Auto-focus on input field
  document.querySelector('input[name="expression"]').focus();

  // Add keyboard shortcut for calculation (Ctrl+Enter or Cmd+Enter)
  document.querySelector('input[name="expression"]').addEventListener('keydown', function(e) {
    if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
      e.preventDefault();
      this.closest('form').submit();
    }
  });

  // Random RPN generator
  const randomRpnBtn = document.getElementById('randomRpnBtn');
  if (randomRpnBtn) {
    randomRpnBtn.addEventListener('click', function() {
      const expressions = [
        // Simple operations
        '5 3 +',
        '10 4 -',
        '6 7 *',
        '15 3 /',
        '2 4 ^',

        // Medium complexity
        '10 3 2 + -',
        '5 2 * 3 +',
        '20 4 / 2 +',
        '3 2 ^ 1 +',
        '12 3 / 2 *',

        // Higher complexity
        '10 3 * 2 ^',
        '15 7 1 1 + - /',
        '2 3 ^ 4 + 5 *',
        '100 10 / 2 ^ 5 -',
        '6 2 / 3 + 4 *'
      ];

      const randomExpression = expressions[Math.floor(Math.random() * expressions.length)];
      document.querySelector('input[name="expression"]').value = randomExpression;
      document.querySelector('input[name="expression"]').focus();
    });
  }

  // Streaming data simulation
  let streamInterval = null;
  let isStreaming = true; // Start with streaming enabled by default

  const streamToggle = document.getElementById('streamToggle');
  const streamStatus = document.getElementById('streamStatus');
  const streamInfo = document.getElementById('streamInfo');
  const streamingTable = document.getElementById('streamingTable');

  // RPN expressions with their correct results and explanations
  const streamingData = [
    { expr: '5 3 +', result: 8, explanation: 'Equivalent to 5 + 3' },
    { expr: '12 4 -', result: 8, explanation: 'Equivalent to 12 - 4' },
    { expr: '6 7 *', result: 42, explanation: 'Equivalent to 6 * 7' },
    { expr: '20 4 /', result: 5, explanation: 'Equivalent to 20 / 4' },
    { expr: '3 2 ^', result: 9, explanation: 'Equivalent to 3^2' },
    { expr: '15 2 3 + -', result: 10, explanation: 'Equivalent to 15 - (2 + 3)' },
    { expr: '4 5 * 2 +', result: 22, explanation: 'Equivalent to (4 * 5) + 2' },
    { expr: '100 10 /', result: 10, explanation: 'Equivalent to 100 / 10' },
    { expr: '2 4 ^ 1 -', result: 15, explanation: 'Equivalent to (2^4) - 1' },
    { expr: '7 3 + 2 *', result: 20, explanation: 'Equivalent to (7 + 3) * 2' },
    { expr: '50 5 / 2 ^', result: 100, explanation: 'Equivalent to (50 / 5)^2' },
    { expr: '8 2 / 3 +', result: 7, explanation: 'Equivalent to (8 / 2) + 3' },
    { expr: '9 3 ^ 2 /', result: 364.5, explanation: 'Equivalent to (9^3) / 2' },
    { expr: '25 5 - 4 *', result: 80, explanation: 'Equivalent to (25 - 5) * 4' },
    { expr: '6 2 * 3 ^', result: 1728, explanation: 'Equivalent to (6 * 2)^3' }
  ];

  function addStreamingRow(data) {
    const newRow = document.createElement('tr');
    newRow.className = 'table-success';
    newRow.innerHTML = `
      <td><code>"${data.expr}"</code></td>
      <td><strong>${data.result}</strong></td>
      <td>${data.explanation}</td>
    `;

    // Add to top of table
    streamingTable.insertBefore(newRow, streamingTable.firstChild);

    // Remove the success highlighting after animation
    setTimeout(() => {
      newRow.classList.remove('table-success');
    }, 1000);

    // Keep only last 10 rows
    while (streamingTable.children.length > 10) {
      streamingTable.removeChild(streamingTable.lastChild);
    }
  }

  function startStreaming() {
    isStreaming = true;
    streamToggle.innerHTML = '<i class="bi bi-stop-fill"></i> Stop Stream';
    streamToggle.className = 'btn btn-sm btn-outline-danger';
    streamStatus.textContent = 'Live';
    streamStatus.className = 'badge bg-success ms-2';
    streamInfo.style.display = 'inline';

    streamInterval = setInterval(() => {
      const randomData = streamingData[Math.floor(Math.random() * streamingData.length)];
      addStreamingRow(randomData);
    }, 500); // Every 0.5 seconds
  }

  function stopStreaming() {
    isStreaming = false;
    streamToggle.innerHTML = '<i class="bi bi-play-fill"></i> Start Stream';
    streamToggle.className = 'btn btn-sm btn-outline-primary';
    streamStatus.textContent = 'Stopped';
    streamStatus.className = 'badge bg-secondary ms-2';
    streamInfo.style.display = 'none';

    if (streamInterval) {
      clearInterval(streamInterval);
      streamInterval = null;
    }
  }

  if (streamToggle) {
    streamToggle.addEventListener('click', function() {
      if (isStreaming) {
        stopStreaming();
      } else {
        startStreaming();
      }
    });

    // Auto-start streaming when page loads
    startStreaming();
  }

  // Enhanced user experience features
  // Focus management and accessibility improvements
  document.addEventListener('DOMContentLoaded', function() {
    const calculatorCard = document.querySelector('.card');
    const form = document.querySelector('form');
    const expressionInput = document.querySelector('input[name="expression"]');

    // Maintain calculator position after form submission
    if (form) {
      form.addEventListener('submit', function() {
        // Store the calculator's position
        const rect = calculatorCard.getBoundingClientRect();
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const calculatorTop = rect.top + scrollTop;

        // After form submission, scroll back to calculator
        setTimeout(() => {
          window.scrollTo({
            top: calculatorTop - 20, // 20px offset for better visibility
            behavior: 'smooth'
          });

          // Re-focus the input for better UX
          if (expressionInput) {
            expressionInput.focus();
          }
        }, 100);
      });
    }

    // Smooth scrolling for navigation links
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });

    // Mobile-friendly: prevent zoom on input focus (iOS)
    if (expressionInput && /iPad|iPhone|iPod/.test(navigator.userAgent)) {
      expressionInput.addEventListener('focus', function() {
        this.style.fontSize = '16px';
      });
    }
  });
});
</script>